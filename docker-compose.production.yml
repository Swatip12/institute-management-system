version: '3.8'

services:
  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=production
      - DATABASE_URL=${DATABASE_URL}
      - DATABASE_USERNAME=${DATABASE_USERNAME}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - CORS_ALLOWED_ORIGINS=https://yourdomain.com
    volumes:
      - backend_logs:/app/logs
    networks:
      - institute_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Public Website Service
  public-website:
    build:
      context: ./public-website
      dockerfile: Dockerfile
      args:
        - BUILD_CONFIGURATION=production
    ports:
      - "80:80"
      - "443:443"
    environment:
      - API_URL=http://backend:8080/api
      - PUBLIC_API_URL=http://backend:8080/api/public
      - ENABLE_ANALYTICS=true
      - ENABLE_SERVICE_WORKER=true
      - LOG_LEVEL=error
      - ENABLE_ERROR_TRACKING=true
    volumes:
      - ./ssl:/etc/nginx/ssl:ro
      - public_logs:/var/log/nginx
    networks:
      - institute_network
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Admin Dashboard Service
  admin-dashboard:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "4200:80"
    environment:
      - API_URL=http://backend:8080/api
      - ENABLE_ANALYTICS=true
      - LOG_LEVEL=error
    volumes:
      - admin_logs:/var/log/nginx
    networks:
      - institute_network
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped

  # Database Service (if using containerized database)
  database:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=${DATABASE_NAME}
      - POSTGRES_USER=${DATABASE_USERNAME}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - institute_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USERNAME} -d ${DATABASE_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - institute_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Load Balancer and SSL Termination
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - institute_network
    depends_on:
      - public-website
      - admin-dashboard
      - backend
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  public_logs:
    driver: local
  admin_logs:
    driver: local
  nginx_logs:
    driver: local

networks:
  institute_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16